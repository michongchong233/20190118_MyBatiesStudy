<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/aop            
    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    ">
	<!-- id，表示獲取對象標識 class，創建哪個類的對象(包名+類名) -->
	<!-- 無參構造器的配置 -->
	<bean id="T04_Person_01" class="com.mickey.pojo.T04_Person" />

	<!-- 有參構造器的配置 需要先提供有參數的構造方法 -->
	<bean id="T04_Person_02" class="com.mickey.pojo.T04_Person">
		<!-- 以下屬性皆為可選配置，如果符合相同條件的構造器則會調用pojo中最後一個構造器 index，代表第幾個參驄，從0開始 type，參數型別，除基本數據類型之外都要寫包名+類名，int和java.lang.Integer有區別 
			name，參數名 value，賦給參數的值 -->
		<constructor-arg index="0" type="int" name="id"
			value="5"></constructor-arg>
		<constructor-arg index="1" type="java.lang.String"
			name="name" value="Mickey"></constructor-arg>
	</bean>

	<!-- 實例工廠 -->
	<bean id="T05_PersonFactory"
		class="com.mickey.pojo.T05_PersonFactory" />
	<bean id="T05_Factory_a" factory-bean="T05_PersonFactory"
		factory-method="createPerson">
		<constructor-arg index="0" value="A"></constructor-arg><!-- 
			如果沒有變量傳入可省略 -->
	</bean>

	<!-- 靜態工廠 -->
	<bean id="T05_Factory_Static"
		class="com.mickey.pojo.T05_PersonFactoryStatic"
		factory-method="createPerson">
		<constructor-arg index="0" value="A"></constructor-arg><!-- 
			如果沒有變量傳入可省略 -->
	</bean>

	<!-- 設值注入(通過setter) -->
	<bean id="T06_Person_01" class="com.mickey.pojo.T04_Person">
		<property name="id" value="123"></property>
		<property name="name" value="Mike"></property>
	</bean>
	<bean id="T06_Person_02" class="com.mickey.pojo.T04_Person">
		<property name="id">
			<value>123</value>
		</property>
		<property name="name">
			<value>Mike</value>
		</property>
	</bean>

	<bean id="T06_Goods" class="com.mickey.pojo.T06_Goods">
		<property name="gname" value="MyGoods"></property>
		<property name="price" value="2333"></property>
	</bean>
	<bean id="T06_Person_03" class="com.mickey.pojo.T04_Person">
		<property name="id" value="123"></property>
		<property name="name" value="Mike"></property>
		<property name="set"><!-- 給Set賦值 -->
			<set>
				<value>set_1</value>
				<value>set_2</value>
				<value>set_3</value>
			</set>
		</property>
		<property name="list"><!-- 給List賦值 -->
			<list>
				<value>list_1</value>
				<value>list_2</value>
				<value>list_3</value>
			</list>
		</property>
		<property name="map"><!-- 給Map賦值 -->
			<map>
				<entry key="key_01" value="value_01"></entry>
				<entry key="key_02" value="value_02"></entry>
				<entry key="key_03" value="value_03"></entry>
			</map>
		</property>
		<property name="strs"><!-- 給數組賦值 -->
			<array>
				<value>array_01</value>
				<value>array_02</value>
				<value>array_03</value>
			</array>
		</property>
		<!-- .properties類型 -->
		<!-- <property name="demo"> <props> <prop key="key_01">value_01</prop> 
			<prop key="key_02">value_02</prop> </props> </property> -->
		<property name="goods" ref="T06_Goods"><!-- 依賴注入，DI -->
		</property>
	</bean>

	<!-- 使用Spring簡化MyBatis 數據源封裝類，獲取數據庫連接，需要導spring-jdbc.jar -->
	<!-- 數據庫來源信息 -->
	<bean id="T08_DataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="com.mysql.cj.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/dbtest?serverTimezone=UTC"></property>
		<property name="username" value="root"></property>
		<property name="password" value="1234"></property>
	</bean>
	<!-- 創建SqlSessionFactory的實體類，目的連接數據庫，配置此bean標簽需另外下載mybatis-spring.jar -->
	<bean id="T08_DataSourceFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="T08_DataSource"></property>
	</bean>

	<!-- 掃描器，負責掃描XXXMapper.xml，相當於是<mappers>中<package> -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"><!-- 不需要被別人引用的類就不用寫id屬性(默認為類名) -->
		<property name="basePackage" value="com.mickey.mapper"></property><!-- 設置要掃描哪個包 -->
		<property name="sqlSessionFactory"
			ref="T08_DataSourceFactory"></property><!-- 
			讓factory包含掃描器的內容 -->
	</bean>

	<!-- 實例Service接口，T08_StudentService stu = new T08_StudentServiceImpl(); 
		由Spring管理service實現類 -->
	<bean id="T08_StudentService"
		class="com.mickey.service.impl.T08_StudentServiceImpl">
		<property name="studentMapper" ref="t08_StudentMapper"></property>
	</bean>

	<!-- Spring AOP -->
	<!-- 配置切點、切面類 -->
	<bean id="T11_AopDemo" class="com.mickey.test.T11_AopDemo"></bean><!-- 切點 -->
	<bean id="T11_TryBeforeAdvice" class="com.mickey.advice.T11_TryBeforeAdvice"></bean><!-- 切面，前置通知 -->
	<bean id="T11_TryAfterAdvice" class="com.mickey.advice.T11_TryAfterAdvice"></bean><!-- 切面，後置通知 -->
	<bean id="T13_TryExceptionAdvice" class="com.mickey.advice.T13_TryExceptionAdvice"></bean><!-- 切面，異常通知 -->
	<bean id="T14_TryExceptionAdvice" class="com.mickey.advice.T14_TryExceptionAdvice"></bean><!-- 切面，異常通知 -->
	<bean id="T15_TryArroundAdvice" class="com.mickey.advice.T15_TryArroundAdvice"></bean><!-- 切面，環繞通知 -->
	<bean id="T16_TryAspectJAdvice" class="com.mickey.advice.T16_TryAspectJAdvice"></bean><!-- 切面 -->
	<aop:config>
		<!-- 配置切面表达式 -->
		<aop:pointcut expression="execution(* com.mickey.test.T11_AopDemo.*(..))" id="T11_Pointcut" />
		<!-- 當切點是有參方法時的設置，為了在切面配置時引入 -->
		<aop:pointcut expression="execution(* com.mickey.test.T11_AopDemo.Demo_02(int, String) and (id, name))"
			id="T11_MyAop_02" />
		<!-- *匹配任意方法名、任意類名、任意一級的所有項目，*(..)代表匹配任意方法參數 -->
		<aop:pointcut expression="exceution(* com.mickey.*.service.impl.*(..))"
			id="T11_MyAop_03" /> 
		<!-- 使用Schema-based方式配置配置切面通知，前置通知或後置通知是由類實現的接口決定 -->
		<aop:advisor advice-ref="T11_TryBeforeAdvice" pointcut-ref="T11_Pointcut"/>
		<aop:advisor advice-ref="T11_TryAfterAdvice" pointcut-ref="T11_Pointcut"/>
		<!-- 使用Schema-based方式配置異常通知 -->
		<aop:advisor advice-ref="T14_TryExceptionAdvice" pointcut-ref="T11_Pointcut"/>
		<!-- 使用Schema-based方式配置環繞通知 -->
		<aop:advisor advice-ref="T15_TryArroundAdvice" pointcut-ref="T11_Pointcut"/>
		
		<!-- 使用AspectJ方式配置異常通知 -->
		<aop:aspect ref="T13_TryExceptionAdvice"><!-- ref，配置異常通知在哪個類中 -->
			<!--  使用AspectJ方法配置切面表達式(和Schema-based不能共用) -->
			<aop:pointcut expression="execution(* com.mickey.test.T11_AopDemo.*(..))" id="T13_Pointcut"/>
			<!-- method，配置異常通知是使用哪個方法；pointcut-ref，配置所使用切點；Exception的變量，一定要與方法傳入的形參名一樣 -->
			<aop:after-throwing method="myException" throwing="e" pointcut-ref="T13_Pointcut"/>
		</aop:aspect>
		
		<aop:aspect ref="T16_TryAspectJAdvice">
			<aop:pointcut expression="execution(* com.mickey.test.T11_AopDemo.*(..))" id="T16_Pointcut"/><!-- 設定切面表達式 -->
			<!-- execution(* com.mickey.test.T11_AopDemo.demo_02(int, String) and args(uid, uname)) -->
			<aop:before method="beforeAdviceAspectJ" pointcut-ref="T16_Pointcut"/><!-- 前置通知 -->
			<aop:before method="beforeAdviceAspectJ" pointcut-ref="T16_Pointcut"/><!-- 前置通知 -->
			<aop:after method="afterAdviceAspectJ" pointcut-ref="T16_Pointcut"/><!-- 後置通知，若有異常也執行 -->
			<aop:after-returning method="afterAdviceReturningAspectJ" pointcut-ref="T16_Pointcut"/><!-- 後置通知，若有異常不執行 -->
			<aop:around method="aroundAdviceAspectJ" pointcut-ref="T16_Pointcut"/><!--環繞通知 -->
			
			<!-- 使用AspectJ方式要獲取切點參數 -->
			<aop:pointcut expression="execution(* com.mickey.test.T11_AopDemo.demo_02(int, String)) and args(uid, uname)" id="T17_Pointcut"/><!-- 設定切面表達式 -->
			<aop:before method="beforeAdviceAspectJ_T17" pointcut-ref="T16_Pointcut" arg-names="uid,uname"/><!-- 前置通知，有參數 -->
		</aop:aspect>

	</aop:config>

</beans>